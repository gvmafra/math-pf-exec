total: 1804

maths/
  CODE_OF_CONDUCT.md
  tailwind.config.js
  .DS_Store
  run.ipynb
  LICENSE
  CHANGELOG.md
  .editorconfig
  README.md
  .gitignore
  package-lock.json
  package.json
  .gitattributes
  .eslintrc.js
  tsconfig.json
  .eslintignore
  output.txt
  ProjectDetails/
    .DS_Store
    stages/
      ESTÁGIOS 7 a 9.pdf
      ESTÁGIOS 1 a 3.pdf
      ESTÁGIOS 4 a 6.pdf
      ESTÁGIOS - estudo 3 - corrigido.pdf
    shapes/
      04 - triangulo.pdf
      01 - quadrado.pdf
      03 - circulo.pdf
      02 - losango.pdf
    rules/
      tabela fracoes.pdf
  assets/
    icon.png
    icon.icns
    entitlements.mac.plist
    icon.svg
    icon.ico
    assets.d.ts
    icons/
      16x16.png
      1024x1024.png
      256x256.png
      96x96.png
      128x128.png
      48x48.png
      24x24.png
      32x32.png
      512x512.png
      64x64.png
  src/
    .DS_Store
    renderer/
      index.tsx
      App.tsx
      .DS_Store
      index.ejs
      preload.d.ts
      state/
        utils.ts
        gameReducer.ts
        types.ts
        shapeInto.ts
        challengeData.ts
        gameSetup.ts
      components/
        Game.tsx
        CircleButton.tsx
        AdvanceStage.tsx
        Panel.tsx
        Cell.tsx
        Modal.tsx
        StagesCompletedList.tsx
        FinishedGame.tsx
        GridSplitterButton.tsx
        canvas/
          Grid.tsx
          Challenge.tsx
          GameCanvas.tsx
      assets/
        challenges/
          Triangle_2_a.png
          Diamond_2_b.png
          Triangle_2_b.png
          Diamond_2_a.png
          Circle_2_b.png
          Circle_2_a.png
          Square_2_a.png
          Square_2_c.png
          Square_2_b.png
          Square_2_d.png
    __tests__/
      App.test.tsx
    main/
      main.ts
      menu.ts
      preload.ts

---

```typescript
// src/renderer/state/types.ts
import { shapeIds } from './shapeInto'; export type Shape = 'square' | 'diamond' | 'triangle' | 'circle'; export type NumCells = 2 | 3 | 4 | 6 | 8 | 9; export type Letter = 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j'; export type Difficulty = 'easy' | 'medium' | 'hard'; export type Challenge = { shape: Shape; letter: Letter; difficulty: Difficulty; numCells: NumCells; paths: string[]; }; export type ChallengeCanvas = { type: 'challenge'; challenge: Challenge; toggled: boolean[]; }; export type GridCanvas = { type: 'grid'; grid: { current: { rows: number; columns: number }; max: { rows?: number; columns?: number; }; }; toggled: boolean[]; }; export type GameCanvas = GridCanvas | ChallengeCanvas; export type LevelMetadata = { clickCount: number; attempts: number; time: number; completed: boolean; challengesAlreadyCompleted: shapeIds[]; }; export type Level = { challenge: ChallengeCanvas; canvas: GameCanvas; metadata: LevelMetadata; }; export type StageMetadata = { currentLevel: number; completed: boolean; }; export type Stage = { levels: Level[]; metadata: StageMetadata; }; export type GameState = { currentStage: number; stages: Stage[]; justAdvancedStage: boolean; finishedGame: boolean; }; 
```

---

```typescript
// src/renderer/state/gameSetup.ts
 import { GameState, LevelMetadata, StageMetadata } from 'renderer/state/types'; import { challenges } from './challengeData'; export const initialLevelMetadata = (): LevelMetadata => ({ clickCount: 0, attempts: 0, time: 0, completed: false, challengesAlreadyCompleted: [], }); export const initialStageMetadata = (): StageMetadata => ({ currentLevel: 0, completed: false, }); export const initialState: GameState = { currentStage: 0, justAdvancedStage: false, finishedGame: false, stages: [ { levels: [ { challenge: { type: 'challenge', challenge: challenges.Square2a, toggled: [false, true], }, canvas: { type: 'challenge', challenge: challenges.Triangle2b, toggled: [false, false], }, metadata: initialLevelMetadata(), }, { challenge: { type: 'challenge', challenge: challenges.Square2b, toggled: [false, true], }, canvas: { type: 'grid', grid: { current: { rows: 2, columns: 1 }, max: { rows: 4, columns: 4 }, }, toggled: [false, false], }, metadata: initialLevelMetadata(), }, { challenge: { type: 'challenge', challenge: challenges.Square2c, toggled: [false, true], }, canvas: { type: 'grid', grid: { current: { rows: 2, columns: 1 }, max: { rows: 4, columns: 4 }, }, toggled: [false, false], }, metadata: initialLevelMetadata(), }, { challenge: { type: 'challenge', challenge: challenges.Square2d, toggled: [false, true], }, canvas: { type: 'grid', grid: { current: { rows: 2, columns: 1 }, max: { rows: 4, columns: 4 }, }, toggled: [false, false], }, metadata: initialLevelMetadata(), }, { challenge: { type: 'challenge', challenge: challenges.Circle2a, toggled: [false, true], }, canvas: { type: 'grid', grid: { current: { rows: 2, columns: 1 }, max: { rows: 4, columns: 4 }, }, toggled: [false, false], }, metadata: initialLevelMetadata(), }, { challenge: { type: 'challenge', challenge: challenges.Circle2b, toggled: [false, true], }, canvas: { type: 'grid', grid: { current: { rows: 2, columns: 1 }, max: { rows: 4, columns: 4 }, }, toggled: [false, false], }, metadata: initialLevelMetadata(), }, { challenge: { type: 'challenge', challenge: challenges.Diamond2a, toggled: [false, true], }, canvas: { type: 'grid', grid: { current: { rows: 2, columns: 1 }, max: { rows: 4, columns: 4 }, }, toggled: [false, false], }, metadata: initialLevelMetadata(), }, { challenge: { type: 'challenge', challenge: challenges.Diamond2b, toggled: [false, true], }, canvas: { type: 'grid', grid: { current: { rows: 2, columns: 1 }, max: { rows: 4, columns: 4 }, }, toggled: [false, false], }, metadata: initialLevelMetadata(), }, { challenge: { type: 'challenge', challenge: challenges.Triangle2a, toggled: [false, true], }, canvas: { type: 'grid', grid: { current: { rows: 2, columns: 1 }, max: { rows: 4, columns: 4 }, }, toggled: [false, false], }, metadata: initialLevelMetadata(), }, { challenge: { type: 'challenge', challenge: challenges.Triangle2b, toggled: [false, true], }, canvas: { type: 'grid', grid: { current: { rows: 2, columns: 1 }, max: { rows: 4, columns: 4 }, }, toggled: [false, false], }, metadata: initialLevelMetadata(), }, ], metadata: initialStageMetadata(), }, ], }; 
```